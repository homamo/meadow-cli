import dayjs from 'dayjs';
import PdfPrinter from 'pdfmake';
import { formatUserName } from '@homamo/meadow-utils';

import Logger from '../../../loaders/logger';
import findRedFox from './findRedFox';

// https://pdfmake.github.io/docs/

const fs = require('fs');

// function to encode file data to base64 encoded string
function imageToBase64(file) {
  // read binary data
  const image = fs.readFileSync(file);
  // convert binary data to base64 encoded string
  return Buffer.from(image).toString('base64');
}

const spacing = [5, 10, 20, 40, 80, 160];

const getFilename = ({ redFoxId, timestamp }) => {
  try {
    Logger.debug('[generateRedFoxPdf.getFilename] Formatting filename...');
    const formattedTimestamp = dayjs(timestamp).format('YYYYMMDD-HHmm');
    return `redFox-${redFoxId}-${formattedTimestamp}.csv`;
  } catch (exception) {
    throw new Error(`[generateRedFoxPdf.getFilename] ${exception.message}`);
  }
};

const generateRedFoxReport = ({ redFox }) => {
  try {
    Logger.debug(
      '[generateRedFoxPdf.generateRedFoxReport] Generating RedFox pdf...',
    );

    return [
      {
        columns: [
          {
            width: 100,
            image: 'logo',
          },
        ],
      },
      {
        stack: [
          {
            text: redFox.name,
            margin: [0, spacing[2], 0, spacing[2]],
            style: 'header',
          },
          {
            stack: [
              { text: `Status: ${redFox.status}` },
              { text: `Created by ${formatUserName(redFox.owner)}` },
            ],
          },
        ],
        fontSize: 10,
      },
    ];
  } catch (exception) {
    throw new Error(
      `[generateRedFoxPdf.generateRedFoxReport] ${exception.message}`,
    );
  }
};

const createDoc = async ({ redFox }) => {
  try {
    Logger.debug('[generateRedFoxPdf.createDoc] Creating doc...');

    return new Promise((resolve, reject) => {
      const fonts = {
        Helvetica: {
          normal: 'Helvetica',
          bold: 'Helvetica-Bold',
          italics: 'Helvetica-Oblique',
          bolditalics: 'Helvetica-BoldOblique',
        },
      };

      const printer = new PdfPrinter(fonts);

      const logoBase64 = imageToBase64('src/images/logo.png');
      const redFoxReport = generateRedFoxReport({ redFox });

      const docDefinition = {
        header: (
          currentPage,
          //  pageCount,
          //  pageSize
        ) => {
          // No header on first page
          if (currentPage !== 1) {
            return [
              {
                text: `red-fox-${redFox._id}`,
                margin: [spacing[2], spacing[1]],
              },
            ];
          }
          return undefined;
        },
        content: [redFoxReport],
        footer: (currentPage, pageCount) => {
          return {
            stack: [
              {
                text: `Generated by Meadow`,
              },
              {
                columns: [
                  {
                    width: 'auto',
                    text: `For more information visit https://homamo.co`,
                    link: 'https://homamo.co',
                  },
                  {
                    width: '*',
                    text: `${currentPage.toString()} of ${pageCount}`,
                    alignment: 'right',
                  },
                ],
              },
            ],
            style: 'small',
            margin: [spacing[2], spacing[3], spacing[2], spacing[0]],
          };
        },
        images: {
          logo: `data:image/png;base64,${logoBase64}`,
        },
        defaultStyle: {
          fontSize: 8,
          lineHeight: 1.2,
          font: 'Helvetica',
        },
        styles: {
          header: {
            fontSize: 18,
            bold: true,
          },
          subheader: {
            fontSize: 14,
            bold: true,
          },
          quote: {
            italics: true,
          },
          small: {
            fontSize: 7,
          },
        },
        pageSize: 'A4',
        pageMargins: [spacing[3], spacing[3], spacing[3], spacing[4]],
      };

      const pdfDoc = printer.createPdfKitDocument(docDefinition);
      const buffers = [];
      pdfDoc.on('data', buffers.push.bind(buffers));
      pdfDoc.on('error', (e) => {
        console.log(e);
        reject(e);
      });
      pdfDoc.on('end', () => {
        const file = Buffer.concat(buffers);
        resolve(file);
      });

      pdfDoc.end();
    });
  } catch (exception) {
    throw new Error(`[generateRedFoxPdf.createDoc] ${exception.message}`);
  }
};

const validateOptions = (options) => {
  try {
    Logger.debug('[generateRedFoxPdf.validateOptions] Validating options...');

    if (!options) throw new Error('options object is required.');
    if (!options.id) throw new Error('options.id is required.');
    if (!options.currentUser)
      throw new Error('options.currentUser is required.');

    Logger.debug(
      '[generateRedFoxPdf.validateOptions] Validating options passed.',
    );
  } catch (exception) {
    throw new Error(`[generateRedFoxPdf.validateOptions] ${exception.message}`);
  }
};

export default async (options) => {
  try {
    validateOptions(options);
    const { id } = options;
    const redFoxId = id;
    const timestamp = new Date();
    const redFox = await findRedFox({ filter: { _id: redFoxId } });
    const file = await createDoc({ redFox, timestamp });
    const filename = getFilename({
      redFoxId,
      timestamp,
    });
    return { filename, file };
  } catch (exception) {
    throw new Error(`[generateRedFoxPdf] ${exception.message}`);
  }
};
